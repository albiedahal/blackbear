[Tests]
  issues = '#333'
  design = 'CauchyStressFromNEML2.md CauchyStressFromNEML2UO.md CauchyStressFromNEML2Receiver.md'
  [neml2_error]
    type = RunException
    input = 'fem.i'
    cli_args = 'neml2_input=error'
    requirement = 'BlackBear shall be capable of capturing errors occurring during the evaluation of a NEML2 model.'
    expect_err = 'To debug NEML2 related issues'
    collections = 'SYSTEM'
    required_submodule = 'contrib/neml2'
    valgrind = none
  []
  [neml2]
    collections = 'SYSTEM'
    requirement = 'BlackBear shall be capable of interfacing with the NEML2 library to perform constitutive update '
    [elasticity]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=elasticity'
      exodiff = 'elasticity.e'
      detail = 'to solve an elasticity problem;'
      required_submodule = 'contrib/neml2'
      valgrind = heavy
    []
    [viscoplasticity_perfect]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_perfect'
      exodiff = 'viscoplasticity_perfect.e'
      detail = 'to solve a perfect viscoplasticity problem;'
      required_submodule = 'contrib/neml2'
      valgrind = heavy
    []
    [viscoplasticity_isoharden]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_isoharden'
      exodiff = 'viscoplasticity_isoharden.e'
      detail = 'to solve a viscoplasticity problem with isotropic hardening;'
      required_submodule = 'contrib/neml2'
      valgrind = heavy
    []
    [viscoplasticity_kinharden]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_kinharden'
      exodiff = 'viscoplasticity_kinharden.e'
      detail = 'to solve a viscoplasticity problem with kinematic hardening;'
      required_submodule = 'contrib/neml2'
      valgrind = heavy
    []
    [viscoplasticity_isokinharden]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_isokinharden'
      exodiff = 'viscoplasticity_isokinharden.e'
      detail = 'to solve a viscoplasticity problem with both isotropic and kinematic hardening;'
      required_submodule = 'contrib/neml2'
      valgrind = heavy
    []
    [viscoplasticity_chaboche]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_chaboche'
      exodiff = 'viscoplasticity_chaboche.e'
      detail = 'to solve a viscoplasticity problem with non-associative Chaboche hardening;'
      required_submodule = 'contrib/neml2'
      valgrind = heavy
    []
    [viscoplasticity_radial_return]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_radial_return'
      exodiff = 'viscoplasticity_radial_return.e'
      detail = 'to solve a viscoplasticity problem using radial return;'
      required_submodule = 'contrib/neml2'
      valgrind = heavy
    []
    [rate_independent_plasticity_perfect]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=rate_independent_plasticity_perfect'
      exodiff = 'rate_independent_plasticity_perfect.e'
      detail = 'to solve a rate-independent problem with perfect plasticity;'
      required_submodule = 'contrib/neml2'
      valgrind = heavy
    []
    [rate_independent_plasticity_isoharden]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=rate_independent_plasticity_isoharden'
      exodiff = 'rate_independent_plasticity_isoharden.e'
      detail = 'to solve a rate-independent problem with isotropic hardening;'
      required_submodule = 'contrib/neml2'
      valgrind = heavy
    []
    [rate_independent_plasticity_kinharden]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=rate_independent_plasticity_kinharden'
      exodiff = 'rate_independent_plasticity_kinharden.e'
      detail = 'to solve a rate-independent problem with kinematic hardening;'
      required_submodule = 'contrib/neml2'
      valgrind = heavy
    []
    [rate_independent_plasticity_isokinharden]
      type = Exodiff
      input = 'fem.i'
      cli_args = 'neml2_input=rate_independent_plasticity_isokinharden'
      exodiff = 'rate_independent_plasticity_isokinharden.e'
      detail = 'to solve a rate-independent problem with both isotropic and kinematic hardening.'
      required_submodule = 'contrib/neml2'
      valgrind = heavy
    []
    [batched]
      type = Exodiff
      prereq = 'neml2/viscoplasticity_isokinharden'
      input = 'fem.i'
      cli_args = 'neml2_input=viscoplasticity_isokinharden NEML2/mode=ALL'
      exodiff = 'viscoplasticity_isokinharden.e'
      detail = 'in a batched fashion.'
      required_submodule = 'contrib/neml2'
      recover = false
      valgrind = heavy
    []
  []
[]
